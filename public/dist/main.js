!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=6)}([function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var r=e.protocol+"//"+e.host,n=r+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?r+i:n+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,r){var n={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),s=null,a=0,l=[],c=r(0);function u(t,e){for(var r=0;r<t.length;r++){var o=t[r],i=n[o.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(b(o.parts[s],e))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(b(o.parts[s],e));n[o.id]={id:o.id,refs:1,parts:a}}}}function f(t,e){for(var r=[],n={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};n[s]?n[s].parts.push(a):r.push(n[s]={id:s,parts:[a]})}return r}function d(t,e){var r=i(t.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=l[l.length-1];if("top"===t.insertAt)n?n.nextSibling?r.insertBefore(e,n.nextSibling):r.appendChild(e):r.insertBefore(e,r.firstChild),l.push(e);else if("bottom"===t.insertAt)r.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertInto+" "+t.insertAt.before);r.insertBefore(e,o)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function m(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),v(e,t.attrs),d(t,e),e}function v(t,e){Object.keys(e).forEach(function(r){t.setAttribute(r,e[r])})}function b(t,e){var r,n,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var l=a++;r=s||(s=m(e)),n=g.bind(null,r,l,!1),o=g.bind(null,r,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),d(t,e),e}(e),n=function(t,e,r){var n=r.css,o=r.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(n=c(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,r,e),o=function(){p(r),r.href&&URL.revokeObjectURL(r.href)}):(r=m(e),n=function(t,e){var r=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){p(r)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var r=f(t,e);return u(r,e),function(t){for(var o=[],i=0;i<r.length;i++){var s=r[i];(a=n[s.id]).refs--,o.push(a)}t&&u(f(t,e),e);for(i=0;i<o.length;i++){var a;if(0===(a=o[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete n[a.id]}}}};var h=function(){var t=[];return function(e,r){return t[e]=r,t.filter(Boolean).join("\n")}}();function g(t,e,r,n){var o=r?"":n.css;if(t.styleSheet)t.styleSheet.cssText=h(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r=function(t,e){var r=t[1]||"",n=t[3];if(!n)return r;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(n),i=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r}).join("")},e.i=function(t,r){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(n[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&n[s[0]]||(r&&!s[2]?s[2]=r:r&&(s[2]="("+s[2]+") and ("+r+")"),e.push(s))}},e}},function(t,e,r){(t.exports=r(2)(!1)).push([t.i,"\r\n\r\n.search_area{\r\n    display:flex; \r\n    flex-direction:row;\r\n    margin-bottom:15px;\r\n}\r\n\r\n#title{\r\n    border: solid black;\r\n}\r\n\r\n.error {\r\n    border-color: red;\r\n    animation: animateBorder 1s linear infinite;\r\n} \r\n\r\n.form-group {\r\n    position: relative;\r\n}\r\n\r\n.error-message {\r\n    position: absolute;\r\n    display: none;\r\n    color: red;\r\n    font-size: 12px;\r\n    bottom: -12px;\r\n}\r\n\r\n@keyframes animateBorder {\r\n    from {\r\n        border-color: red; \r\n    }\r\n\r\n    to {\r\n        border-color: blue;\r\n    }\r\n}\r\n\r\n.visible {\r\n    display: block !important;\r\n\r\n}\r\n\r\nbody{\r\n    background-image: url('http://fc06.deviantart.net/fs50/i/2009/281/6/7/My_Favorite_Films_Collage_by_swapnilnarendra.jpg');\r\n    background-size:contain;\r\n    opacity:1;\r\n}\r\n\r\n\r\n#card{\r\n    display:flex;\r\n    flex-wrap:wrap;\r\n    flex-direction:row;\r\n    justify-content: space-around;\r\n  \r\n};\r\n\r\n",""])},function(t,e,r){var n=r(3);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(1)(n,o);n.locals&&(t.exports=n.locals)},function(t,e){const r="http://www.omdbapi.com/?apikey=fd58e48d",n=document.forms.search_form;function o(t,e){e?t.classList.add("visible1"):t.classList.remove("visible")}function i(t){console.log(t);const e=` \n    <div class="row">\n    <div class="col-md-4">\n      <img src="${t.Poster}">\n    </div>\n    <div class="col-md-6">\n      <h2>${t.Title}</h2>\n      <ul class="list-group">\n        <li class="list-group-item"><strong>Genre:</strong> ${t.Genre}</li>\n        <li class="list-group-item"><strong>Released:</strong> ${t.Released}</li>\n        <li class="list-group-item"><strong>Rated:</strong> ${t.Rated}</li>\n        <li class="list-group-item"><strong>IMDB Rating:</strong> ${t.imdbRating}</li>\n        <li class="list-group-item"><strong>Director:</strong> ${t.Director}</li>\n        <li class="list-group-item"><strong>Writer:</strong> ${t.Writer}</li>\n        <li class="list-group-item"><strong>Actors:</strong> ${t.Actors}</li>\n      </ul>\n    </div>\n  </div>\n  <div class="modal-dialog" role="document">\n      <h3>Plot</h3>\n      ${t.Plot}\n      <hr>\n      <a href="http://imdb.com/title/${t.imdbID}" target="_blank" class="btn btn-primary">View IMDB</a>\n      <a href="index.html" class="btn btn-secondary">Go Back To Search</a>\n  </div>\n  \n `;document.querySelector("#movie-details").innerHTML=e}n.addEventListener("submit",t=>{t.preventDefault();const e=n.title.value.trim(),s=n.radio.value,a=n.page.value;e?(fetch(`${r}&s=${e}&type=${s}&page=${a}`).then(t=>t.json()).then(t=>(function(t){const e=t.Search.map(t=>`\n          <div class="card border-primary mb-3" style="max-width: 20rem;">\n                    <img class="card-img-top" src="${t.Poster}" onerror="this.src = 'https://www.film.ru/images/empty/260x400.png'">\n                    <div class="card-body">\n                    <h5 class="card-title">${t.Title}</h5>\n                    <p class="card-text">${t.Type}</p>\n                    <button type="button" class="btn btn-primary more-info" data-toggle="modal" data-target="#movie-details" data-imdbID="${t.imdbID}">More info</button>\n                    </div>\n              </div>\n    `).join("");document.querySelector("#card.result").innerHTML=e,function(){var t=document.querySelectorAll(".more-info");console.log(t);for(var e=0;e<=t.length;e++){var n=t[e];n&&n.addEventListener("click",t=>{t.preventDefault();const e=t.target.getAttribute("data-imdbID");fetch(`${r}&i=${e}`).then(t=>t.json()).then(t=>i(t))})}}();let n=[];for(var o=1;o<item.totalResults/10;o++)n.concat(`<option value = ${o} name="page">Page${o}</option>`);selectElement.innerHTML=n})(t)),n.title.classList.remove("error"),o(n.querySelector(".error-message"),!1)):(n.title.classList.add("error"),o(n.querySelector(".error-message"),!0))})},function(t,e,r){"use strict";r.r(e);r(5),r(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,